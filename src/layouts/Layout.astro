---
import Loader from "@/components/Loader.tsx";
import { ViewTransitions } from "astro:transitions";
// Importa las fuentes que necesites
import "@fontsource-variable/raleway";
import "@fontsource/parisienne";
import "@fontsource-variable/rubik";
// Importa tus estilos generales
import "../styles/layout.css";

// Define las props que espera este layout
interface Props {
    title: string;
    description?: string;
    ogImage?: string;
}

// Extrae las props con valores por defecto
const {
    title,
    description = "Invitación para el cumple de Galia",
    ogImage = "/og-image.jpg"
} = Astro.props;
---

<!doctype html>
<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

        <title>{title}</title>
        <meta name="description" content={description} />
        <meta name="theme-color" content="#FFB6C1" /> {/* Ejemplo de color de tema */}

        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" /> {/* Ejemplo de estilo de barra de estado */}

        <meta property="og:type" content="website" />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:image" content={ogImage} />

        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:title" content={title} />
        <meta property="twitter:description" content={description} />
        <meta property="twitter:image" content={ogImage} />

        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
        <link rel="manifest" href="/manifest.json" />

        <link rel="preload" href="/herogalia.gif" as="image" type="image/gif" /> {/* Añadido type */}
        <link rel="preload" href="/margarita.gif" as="image" type="image/gif" /> {/* Añadido type */}
        {/* Precarga de fuentes si es necesario, Raleway, Parisienne y Rubik ya se importan en CSS */}
        {/* <link rel="preload" href="path/to/your/font.woff2" as="font" type="font/woff2" crossorigin> */}


        {/* Preconnect para mejorar la carga de fuentes de Google Fonts */}
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

        <ViewTransitions />
    </head>
    <body>
        {/* Loader component - client:load asegura que se renderice en el cliente */}
        <Loader client:load />

        {/* Decoración de fondo (ajusta las clases y estilos según tu diseño) */}
        <div class="background-decoration">
            <div class="decoration-overlay"></div>
        </div>

        {/* Contenido principal - aquí se inyectará el contenido de las páginas que usan este layout */}
        <main id="content">
            <slot />
        </main>

        {/* --- Script con la solución para el Error 2683 --- */}
        {/* Este script NO necesita lang="ts" a menos que añadas más TypeScript que requiera compilación */}
        <script>
            // Add smooth scroll behavior for anchor links
            // Espera a que el DOM esté completamente cargado
            document.addEventListener('DOMContentLoaded', () => {
                // Selecciona todos los enlaces que empiezan con "#"
                document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                    // Añade un event listener para el clic
                    // Usamos una función de flecha para mantener el 'this' global si fuera necesario fuera de este listener,
                    // pero lo importante es que usamos e.currentTarget, no 'this', para obtener el elemento.
                    anchor.addEventListener('click', (e) => {
                        e.preventDefault(); // Evita el comportamiento de enlace por defecto

                        // --- SOLUCIÓN: Usar e.currentTarget en lugar de 'this' ---
                        // e.currentTarget se refiere al elemento al que el listener está adjunto (el 'anchor' en este caso).
                        // Usamos 'as HTMLAnchorElement' para decirle a TypeScript que sabemos que es un elemento <a>,
                        // resolviendo el error de tipo implícito 'any'.
                        const currentAnchor = e.currentTarget as HTMLAnchorElement;
                        const href = currentAnchor.getAttribute('href'); // Obtiene el valor del atributo href

                        // Si el href está vacío o nulo, no hacemos nada
                        if (!href) {
                            console.warn('Anchor tag missing href attribute:', currentAnchor);
                            return;
                        }

                        // Busca el elemento en la página cuyo ID coincide con el href (ej: #seccion -> busca elemento con id="seccion")
                        const target = document.querySelector(href);

                        // Si encontramos el elemento objetivo, desplazarnos suavemente hacia él
                        if (target) {
                            target.scrollIntoView({
                                behavior: 'smooth' // Desplazamiento suave
                            });
                        } else {
                           console.warn('Could not find target element for href:', href);
                        }
                    });
                });
            });
        </script>
    </body>
</html>